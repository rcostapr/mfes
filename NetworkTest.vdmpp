class NetworkTest
instance variables
	
	nt: Network := new Network();
	
	place1: Place := new Place(1,"Porto");
	place2: Place := new Place(2,"Lisboa");
	place3: Place := new Place(3,"Coimbra");
	place4: Place := new Place(4,"Guarda");
	place5: Place := new Place(5,"Faro");
	place6: Place := new Place(6,"Santarém");
	
	travel: Travel := new Travel(nt);
	
	-- Viagem Bus Porto --> Coimbra
	conn1: Connection := new Connection(place3,<Bus>,80,20);
	-- Viagem Bus Coimbra --> Lisboa
	conn2: Connection := new Connection(place2,<Bus>,100,25);
	-- Viagem Bus Coimbra --> Guarda
	conn3: Connection := new Connection(place4,<Bus>,90,15);
	-- Viagem Train Porto --> Lisboa
	conn4: Connection := new Connection(place2,<Train>,130,55);
	-- Viagem Plane Porto --> Lisboa
	conn5: Connection := new Connection(place2,<Plane>,40,200);
	-- Viagem Train Porto --> Coimbra
	conn6: Connection := new Connection(place3,<Train>,50,35);
	-- Viagem Train Lisboa --> Faro
	conn7: Connection := new Connection(place5,<Train>,100,30);
	-- Viagem Bus Lisboa --> Faro
	conn8: Connection := new Connection(place5,<Bus>,160,20);
	
	
	-- Viagem Bus Coimbra --> Porto
	conn9: Connection := new Connection(place1,<Bus>,80,20);
	-- Viagem Train Faro --> Coimbra
	conn10: Connection := new Connection(place3,<Train>,140,45);
	
	
	
operations

	private assertTrue: bool ==> ()
		assertTrue(cond) == return
		pre cond;
		
	private testNetworkCreate: () ==> ()
		testNetworkCreate() == (
			IO`print("Network Size: "); IO`print(nt.size()); IO`print("\n");
			assertTrue(nt.size()=0);
			IO`print("Network Size: "); IO`print(nt.getPlaces()); IO`print("\n");
			assertTrue(nt.getPlaces()={});
		);
		
	private testAddPlaces: () ==> ()
		testAddPlaces() == (
			nt.addPlace(place1);
			nt.addPlace(place2);
			nt.addPlace(place3);
			nt.addPlace(place4);
			nt.addPlace(place5);
			IO`print("Network Size: "); IO`print(nt.size()); IO`print("\n");
			assertTrue(nt.size()=5);
			IO`print("Network Size: "); IO`print(nt.getPlaces()); IO`print("\n");
			assertTrue(nt.getPlaces()={place1,place2,place3,place4,place5});
		);
		
		private testAddConnections: () ==> ()
		testAddConnections() == (
		 	IO`print("\n");IO`print("testAddConnections: ");IO`print("\n");
			nt.addPlace(place1);
			nt.addPlace(place2);
			nt.addPlace(place3);
			nt.addPlace(place4);
			nt.addPlace(place5);
			
			-- Porto Connections
			place1.addConnection(conn1);
			place1.addConnection(conn4);
			place1.addConnection(conn5);
			place1.addConnection(conn6);
			
			-- Lisboa Connections
			place2.addConnection(conn7);
			place2.addConnection(conn8);
			
			-- Coimbra Connections
			place3.addConnection(conn2);
			place3.addConnection(conn3);
			
			IO`print("Network Size: "); IO`print(nt.size()); IO`print("\n");
			assertTrue(nt.size()=5);
			IO`print("Network Size: "); IO`print(nt.getPlaces()); IO`print("\n");
			assertTrue(nt.getPlaces()={place1,place2,place3,place4,place5});
			
			IO`print("Place 1 Connections Size: "); IO`print(place1.connSize()); IO`print("\n");
			assertTrue(place1.connSize()=4);
			IO`print("Place 1 Connections: "); IO`print(place1.getConnections()); IO`print("\n");
			assertTrue(place1.getConnections()={conn1,conn4,conn5,conn6});
			
			IO`print("Place 4 Connections Size: "); IO`print(place4.connSize()); IO`print("\n");
			assertTrue(place4.connSize()=0);
			IO`print("Place 4 Connections: "); IO`print(place4.getConnections()); IO`print("\n");
			assertTrue(place4.getConnections()={});
			
		);
		
		private testGetAllConnections: () ==> ()
		testGetAllConnections() == (
			dcl AllConnections: set of Connection := {}; --var local
			
		 	IO`print("\n");IO`print("testGetAllConnections: ");IO`print("\n");
			nt.addPlace(place1);
			nt.addPlace(place2);
			nt.addPlace(place3);
			nt.addPlace(place4);
			nt.addPlace(place5);
			
			-- Porto Connections
			place1.addConnection(conn1);
			place1.addConnection(conn4);
			place1.addConnection(conn5);
			place1.addConnection(conn6);
			
			-- Lisboa Connections
			place2.addConnection(conn7);
			place2.addConnection(conn8);
			
			-- Coimbra Connections
			place3.addConnection(conn2);
			place3.addConnection(conn3);
			
			for all place in set nt.getPlaces() do
				for all conn in set place.getConnections() do
						AllConnections := AllConnections union {conn};
			
			IO`print("All Connections: "); IO`print(AllConnections); IO`print("\n");
			assertTrue(AllConnections={conn1,conn2,conn3,conn4,conn5,conn6,conn7,conn8});
			
			IO`print("All Connections Size: "); IO`print(card AllConnections); IO`print("\n");
			assertTrue(card AllConnections=8);
			
		);
		
		
		private testTravel: () ==> ()
		testTravel() == (

			dcl travel1: Travel;
			dcl travel2: Travel;
			dcl travel3: Travel;
			dcl travel4: Travel;
			dcl travel5: Travel;
				
		 	IO`print("\n");IO`print("testTravel: ");IO`print("\n");
			nt.addPlace(place1);
			nt.addPlace(place2);
			nt.addPlace(place3);
			nt.addPlace(place4);
			nt.addPlace(place5);
			nt.addPlace(place6);
			nt.removePlace(place6);
			nt.addPlace(place6);
			
			-- Porto Connections
			place1.addConnection(conn1);
			place1.removeConnection(conn1);
			place1.addConnection(conn1);
			place1.addConnection(conn4);
			place1.addConnection(conn5);
			place1.addConnection(conn6);
			
			-- Lisboa Connections
			place2.addConnection(conn7);
			place2.addConnection(conn8);
			
			-- Coimbra Connections
			place3.addConnection(conn2);
			place3.addConnection(conn3);
			place3.addConnection(conn9);
			
			-- Faro Connections
			place5.addConnection(conn10);
			
			travel1 := new Travel(nt,place1,place2);
			IO`print("\nTravel1: ");IO`print(place1.getName());IO`print(" --> ");IO`print(place2.getName()); IO`print("\n");
			travel1.printTrips();
			
			travel2 := new Travel(nt,place1,place4);
			IO`print("\n\nTravel2: ");IO`print(place1.getName());IO`print(" --> ");IO`print(place4.getName()); IO`print("\n");
			travel2.printTrips();
			
			travel3 := new Travel(nt,place1,place5);
			IO`print("\n\nTravel3: ");IO`print(place1.getName());IO`print(" --> ");IO`print(place5.getName()); IO`print("\n");
			travel3.printTrips();
			
			travel4 := new Travel(nt,place5,place1);
			IO`print("\n\nTravel4: ");IO`print(place5.getName());IO`print(" --> ");IO`print(place1.getName()); IO`print("\n");
			travel4.printTrips();
			
			travel5 := new Travel(nt,place1,place6);
			IO`print("\n\nTravel5: ");IO`print(place1.getName());IO`print(" --> ");IO`print(place6.getName()); IO`print("\n");
			travel5.printTrips();
			
			IO`print("\n\nNetwork Size: "); IO`print(nt.size()); IO`print("\n");
			assertTrue(nt.size()=6);
			
			IO`print("\n\nTravel5 empty Trips: "); IO`print(travel5.getTrips()); IO`print("\n");
			assertTrue(travel5.getTrips()={});
			
			nt.clear();
			IO`print("Network Clear Size: "); IO`print(nt.size()); IO`print("\n");
			assertTrue(nt.size()=0);
			
		);
		
		
		private testSearch: () ==> ()
		testSearch() == (
		
			dcl searchResult1: set of Place := {};
			dcl searchResult2: set of Place := {};
			dcl searchResult3: set of Place := {};

		 	IO`print("\n");IO`print("testSearch: ");IO`print("\n");
			nt.addPlace(place1);
			nt.addPlace(place2);
			nt.addPlace(place3);
			nt.addPlace(place4);
			nt.addPlace(place5);
			nt.addPlace(place6);
			nt.removePlace(place6);
			nt.addPlace(place6);
			
			-- Porto Connections
			place1.addConnection(conn1);
			place1.removeConnection(conn1);
			place1.addConnection(conn1);
			place1.addConnection(conn4);
			place1.addConnection(conn5);
			place1.addConnection(conn6);
			
			-- Lisboa Connections
			place2.addConnection(conn7);
			place2.addConnection(conn8);
			
			-- Coimbra Connections
			place3.addConnection(conn2);
			place3.addConnection(conn3);
			place3.addConnection(conn9);
			
			-- Faro Connections
			place5.addConnection(conn10);	

			IO`print("searchResult1 'Por': \n");
			searchResult1:=nt.search("Por");
			for all place in set searchResult1 do (
				IO`print(place.getName()); IO`print("\n");
			);
			IO`print("searchResult1 = {place1}\n\n");
			assertTrue(searchResult1={place1});
			
			IO`print("searchResult2 'por': \n");
			searchResult2:=nt.search("por");
			for all place in set searchResult2 do (
				IO`print(place.getName()); IO`print("\n");
			);
			IO`print("searchResult2 = {} empty\n\n");
			assertTrue(searchResult2={});
			
			IO`print("searchResult3 'or': \n");
			searchResult3:=nt.search("or");
			for all place in set searchResult3 do (
				IO`print(place.getName()); IO`print("\n");
			);
			IO`print("searchResult3 = {place1,place3,place5}\n ");
			assertTrue(searchResult3={place1,place3,place5});	
		);
		
	public static main: () ==> ()
		main() == (
			new NetworkTest().testNetworkCreate();
			new NetworkTest().testAddPlaces();
			new NetworkTest().testAddConnections();
			new NetworkTest().testGetAllConnections();
			new NetworkTest().testTravel();
			new NetworkTest().testSearch();
		);
		
traces
		-- test cases will be generated in all possible combinations
		-- starting with a empty network followed by adding places and for each place adding connections
		-- then add random travels between connections
		randomNetwork : 
			-- Clear NetWork
			nt.clear();

			
			-- Add random Connection to the places
			(let conn in set {conn1,conn2,conn3,conn4,conn5,conn6,conn7,conn8,conn9,conn10}
 						in place1.addConnection(conn)){1,1};
 						
 			(let conn in set {conn1,conn2,conn3,conn4,conn5,conn6,conn7,conn8,conn9,conn10}
 						in place2.addConnection(conn)){1,1};
 						
 			(let conn in set {conn1,conn2,conn3,conn4,conn5,conn6,conn7,conn8,conn9,conn10}
 						in place3.addConnection(conn)){1,1};
 						
			nt.addPlace(place1);
			nt.addPlace(place2);
			nt.addPlace(place3);
			nt.addPlace(place4);
			nt.addPlace(place5);
			nt.addPlace(place6);
				
			nt.size();
			nt.getPlaces();
						
			nt.getConnectionsSize();
							
			travel.setPlaces(place1,place2);
			
randomPlaces : 
			-- Clear NetWork
			nt.clear();
			
			-- Add Places to the network
			(let place in set {place1,place2,place3,place4,place5,place6} in 
				nt.addPlace(place)){2,3};
				
			nt.size();
			nt.getPlaces();

end NetworkTest